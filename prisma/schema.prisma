// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  chatAgents  ChatAgent[]
  apiConfigs  ApiConfig[]
  chatSessions ChatSession[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatAgent {
  id          String   @id @default(cuid())
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  knowledgeBase KnowledgeBase[]
  chatSessions  ChatSession[]
  widgetConfig  WidgetConfig?

  @@index([userId])
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  question  String
  answer    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chatAgentId String
  chatAgent   ChatAgent @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)

  @@index([chatAgentId])
}

model ApiConfig {
  id           String   @id @default(cuid())
  name         String
  apiKey       String   // Encrypted
  endpoint     String
  bodyTemplate String   @db.Text
  headers      Json?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model WidgetConfig {
  id              String @id @default(cuid())
  primaryColor    String @default("#3B82F6")
  secondaryColor  String @default("#1F2937")
  position        String @default("bottom-right") // bottom-right, bottom-left, etc.
  welcomeMessage  String @default("Hi! How can I help you today?")
  placeholder     String @default("Type your message...")
  
  chatAgentId String     @unique
  chatAgent   ChatAgent  @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
}

model ChatSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  chatAgentId String
  chatAgent   ChatAgent  @relation(fields: [chatAgentId], references: [id], onDelete: Cascade)
  
  messages    ChatMessage[]

  @@index([chatAgentId])
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String   @db.Text
  role      String   // 'user' or 'assistant'
  createdAt DateTime @default(now())

  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId])
}
